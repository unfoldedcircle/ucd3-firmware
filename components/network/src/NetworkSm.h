// Autogenerated with StateSmith 0.17.1+9cb7486c1587230c52d22d8b6faadd8e2219313c.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// SPDX-FileCopyrightText: Copyright (c) 2024 Unfolded Circle ApS and/or its affiliates <hello@unfoldedcircle.com>
//
// SPDX-License-Identifier: GPL-3.0-or-later
 
#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
#include "NetworkSmBase.h" // for NetworkBase


// Generated state machine
class NetworkSm : public NetworkBase
{
public:
    enum class EventId: uint8_t
    {
        BUTTON_PRESS = 0,
        CONFIGURE_WIFI = 1,
        CONNECT_TO_AP = 2,
        CONNECTED = 3,
        DELETE_WIFI = 4,
        ETH_FALLBACK = 5,
        ETH_GOT_IP = 6,
        ETH_LINK_DOWN = 7,
        ETH_LINK_UP = 8,
        IMPROV_AUTHORIZED_TIMEOUT = 9,
        IMPROV_BLE_CONNECT = 10,
        IMPROV_BLE_DISCONNECT = 11,
        LOST_CONNECTION = 12,
        NET_INIT_FAIL = 13,
        NET_INIT_SUCCESS = 14,
        REBOOT = 15,
        START = 16,
        TIMER = 17,
        WIFI_GOT_IP = 18,
    };
    
    enum
    {
        EventIdCount = 19
    };
    
    enum class StateId: uint8_t
    {
        ROOT = 0,
        NETWORK_STATE = 1,
        NETWORK_ETH_ACTIVE_STATE = 2,
        ETH_ACTIVE_CONNECTED_STATE = 3,
        ETH_ACTIVE_LINKDOWN_STATE = 4,
        ETH_ACTIVE_LINKUP_STATE = 5,
        ETH_CONNECTING_NEW_STATE = 6,
        ETH_INITIALIZING_STATE = 7,
        ETH_STARTING_STATE = 8,
        NETWORK_WIFI_ACTIVE_STATE = 9,
        WIFI_CONNECTED_STATE = 10,
        WIFI_CONNECTING_NEW_FAILED_STATE = 11,
        WIFI_CONNECTING_NEW_STATE = 12,
        WIFI_CONNECTING_STATE = 13,
        WIFI_INITIALIZING_STATE = 14,
        WIFI_LOST_CONNECTION_STATE = 15,
        WIFI_USER_DISCONNECTED_STATE = 16,
        WIFI_W4_IP_STATE = 17,
        WIFI_IMPROV_STATE = 18,
        IMPROV_AUTHORIZED_STATE = 19,
        IMPROV_AWAITING_AUTH_STATE = 20,
        IMPROV_INITIALIZING_STATE = 21,
        IMPROV_PROVISIONED_STATE = 22,
        IMPROV_PROVISIONING_STATE = 23,
        IMPROV_STOPPED_STATE = 24,
        REBOOT_STATE = 25,
    };
    
    enum
    {
        StateIdCount = 26
    };
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId stateId;
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    NetworkSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void dispatchEvent(EventId eventId);
    
    // Thread safe.
    static char const * stateIdToString(StateId id);
    
    // Thread safe.
    static char const * eventIdToString(EventId id);


// ################################### PRIVATE MEMBERS ###################################
private:
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exitUpToStateHandler(StateId desiredState);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ROOT_enter();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NETWORK_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void NETWORK_STATE_enter();
    
    void NETWORK_STATE_exit();
    
    void NETWORK_STATE_net_init_fail();
    
    void NETWORK_STATE_reboot();
    
    void NETWORK_STATE_start();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NETWORK_ETH_ACTIVE_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void NETWORK_ETH_ACTIVE_STATE_enter();
    
    void NETWORK_ETH_ACTIVE_STATE_exit();
    
    void NETWORK_ETH_ACTIVE_STATE_connect_to_ap();
    
    void NETWORK_ETH_ACTIVE_STATE_delete_wifi();
    
    void NETWORK_ETH_ACTIVE_STATE_eth_got_ip();
    
    void NETWORK_ETH_ACTIVE_STATE_eth_link_down();
    
    void NETWORK_ETH_ACTIVE_STATE_eth_link_up();
    
    void NETWORK_ETH_ACTIVE_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ETH_ACTIVE_CONNECTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ETH_ACTIVE_CONNECTED_STATE_enter();
    
    void ETH_ACTIVE_CONNECTED_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ETH_ACTIVE_LINKDOWN_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ETH_ACTIVE_LINKDOWN_STATE_enter();
    
    void ETH_ACTIVE_LINKDOWN_STATE_exit();
    
    void ETH_ACTIVE_LINKDOWN_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ETH_ACTIVE_LINKUP_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ETH_ACTIVE_LINKUP_STATE_enter();
    
    void ETH_ACTIVE_LINKUP_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ETH_CONNECTING_NEW_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ETH_CONNECTING_NEW_STATE_enter();
    
    void ETH_CONNECTING_NEW_STATE_exit();
    
    void ETH_CONNECTING_NEW_STATE_eth_fallback();
    
    void ETH_CONNECTING_NEW_STATE_lost_connection();
    
    void ETH_CONNECTING_NEW_STATE_wifi_got_ip();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ETH_INITIALIZING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ETH_INITIALIZING_STATE_enter();
    
    void ETH_INITIALIZING_STATE_exit();
    
    void ETH_INITIALIZING_STATE_net_init_fail();
    
    void ETH_INITIALIZING_STATE_net_init_success();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ETH_STARTING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ETH_STARTING_STATE_enter();
    
    void ETH_STARTING_STATE_exit();
    
    void ETH_STARTING_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NETWORK_WIFI_ACTIVE_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void NETWORK_WIFI_ACTIVE_STATE_enter();
    
    void NETWORK_WIFI_ACTIVE_STATE_exit();
    
    void NETWORK_WIFI_ACTIVE_STATE_configure_wifi();
    
    void NETWORK_WIFI_ACTIVE_STATE_connect_to_ap();
    
    void NETWORK_WIFI_ACTIVE_STATE_delete_wifi();
    
    void NETWORK_WIFI_ACTIVE_STATE_eth_fallback();
    
    void NETWORK_WIFI_ACTIVE_STATE_eth_got_ip();
    
    void NETWORK_WIFI_ACTIVE_STATE_eth_link_up();
    
    void NETWORK_WIFI_ACTIVE_STATE_wifi_got_ip();
    
    void NETWORK_WIFI_ACTIVE_STATE_ChoicePoint__transition();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_CONNECTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_CONNECTED_STATE_enter();
    
    void WIFI_CONNECTED_STATE_exit();
    
    void WIFI_CONNECTED_STATE_lost_connection();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_CONNECTING_NEW_FAILED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_CONNECTING_NEW_FAILED_STATE_enter();
    
    void WIFI_CONNECTING_NEW_FAILED_STATE_exit();
    
    void WIFI_CONNECTING_NEW_FAILED_STATE_connected();
    
    void WIFI_CONNECTING_NEW_FAILED_STATE_lost_connection();
    
    void WIFI_CONNECTING_NEW_FAILED_STATE_wifi_got_ip();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_CONNECTING_NEW_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_CONNECTING_NEW_STATE_enter();
    
    void WIFI_CONNECTING_NEW_STATE_exit();
    
    void WIFI_CONNECTING_NEW_STATE_connected();
    
    void WIFI_CONNECTING_NEW_STATE_lost_connection();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_CONNECTING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_CONNECTING_STATE_enter();
    
    void WIFI_CONNECTING_STATE_exit();
    
    void WIFI_CONNECTING_STATE_connected();
    
    void WIFI_CONNECTING_STATE_lost_connection();
    
    void WIFI_CONNECTING_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_INITIALIZING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_INITIALIZING_STATE_enter();
    
    void WIFI_INITIALIZING_STATE_exit();
    
    void WIFI_INITIALIZING_STATE_configure_wifi();
    
    void WIFI_INITIALIZING_STATE_net_init_success();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_LOST_CONNECTION_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_LOST_CONNECTION_STATE_enter();
    
    void WIFI_LOST_CONNECTION_STATE_exit();
    
    void WIFI_LOST_CONNECTION_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_USER_DISCONNECTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_USER_DISCONNECTED_STATE_enter();
    
    void WIFI_USER_DISCONNECTED_STATE_exit();
    
    void WIFI_USER_DISCONNECTED_STATE_lost_connection();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_W4_IP_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_W4_IP_STATE_enter();
    
    void WIFI_W4_IP_STATE_exit();
    
    void WIFI_W4_IP_STATE_timer();
    
    void WIFI_W4_IP_STATE_wifi_got_ip();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_IMPROV_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_IMPROV_STATE_enter();
    
    void WIFI_IMPROV_STATE_exit();
    
    void WIFI_IMPROV_STATE_eth_got_ip();
    
    void WIFI_IMPROV_STATE_improv_ble_disconnect();
    
    void WIFI_IMPROV_STATE_InitialState_transition();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_AUTHORIZED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_AUTHORIZED_STATE_enter();
    
    void IMPROV_AUTHORIZED_STATE_exit();
    
    void IMPROV_AUTHORIZED_STATE_connect_to_ap();
    
    void IMPROV_AUTHORIZED_STATE_improv_authorized_timeout();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_AWAITING_AUTH_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_AWAITING_AUTH_STATE_enter();
    
    void IMPROV_AWAITING_AUTH_STATE_exit();
    
    void IMPROV_AWAITING_AUTH_STATE_button_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_INITIALIZING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_INITIALIZING_STATE_enter();
    
    void IMPROV_INITIALIZING_STATE_exit();
    
    void IMPROV_INITIALIZING_STATE_net_init_success();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_PROVISIONED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_PROVISIONED_STATE_enter();
    
    void IMPROV_PROVISIONED_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_PROVISIONING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_PROVISIONING_STATE_enter();
    
    void IMPROV_PROVISIONING_STATE_exit();
    
    void IMPROV_PROVISIONING_STATE_connected();
    
    void IMPROV_PROVISIONING_STATE_lost_connection();
    
    void IMPROV_PROVISIONING_STATE_timer();
    
    void IMPROV_PROVISIONING_STATE_wifi_got_ip();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_STOPPED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_STOPPED_STATE_enter();
    
    void IMPROV_STOPPED_STATE_exit();
    
    void IMPROV_STOPPED_STATE_improv_ble_connect();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state REBOOT_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void REBOOT_STATE_enter();
    
    void REBOOT_STATE_exit();
};
