// Autogenerated with StateSmith 0.17.1+9cb7486c1587230c52d22d8b6faadd8e2219313c.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// SPDX-FileCopyrightText: Copyright (c) 2024 Unfolded Circle ApS and/or its affiliates <hello@unfoldedcircle.com>
//
// SPDX-License-Identifier: GPL-3.0-or-later
 
#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
#include "DisplaySmBase.h" // for DisplayBase


// Generated state machine
class DisplaySm : public DisplayBase
{
public:
    enum class EventId: uint8_t
    {
        DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        BUTTON_CLICK = 1,
        BUTTON_LONG_PRESS_START = 2,
        BUTTON_LONG_PRESS_UP = 3,
        CHARGING_OFF = 4,
        CHARGING_ON = 5,
        CONNECTED = 6,
        CONNECTING = 7,
        ERROR = 8,
        EXT_PORT_MODE = 9,
        FACTORY_RESET = 10,
        IDENTIFY = 11,
        IMPROV_AUTH_REQUIRED = 12,
        IMPROV_AUTHORIZED = 13,
        IMPROV_END = 14,
        IMPROV_PROVISIONING = 15,
        IMPROV_START = 16,
        IR_LEARNING_FAILED = 17,
        IR_LEARNING_OK = 18,
        IR_LEARNING_START = 19,
        IR_LEARNING_STOP = 20,
        LOST_CONNECTION = 21,
        OTA_FAIL = 22,
        OTA_PROGRESS = 23,
        OTA_START = 24,
        OTA_SUCCESS = 25,
        REBOOT = 26,
        TIMER = 27,
    };
    
    enum
    {
        EventIdCount = 28
    };
    
    enum class StateId: uint8_t
    {
        ROOT = 0,
        DISPLAY_STATE = 1,
        BOOT_ANIMATION_STATE = 2,
        CONNECTING_STATE = 3,
        SHOW_CONNECTED_STATE = 4,
        SHOW_CONNECTING_STATE = 5,
        IR_LEARNING_STATE = 6,
        IR_LEARNED_FAILED_STATE = 7,
        IR_LEARNED_OK_STATE = 8,
        IR_LEARNING_STARTED_STATE = 9,
        OTA_STATE = 10,
        OTA_FAIL_STATE = 11,
        OTA_PROGRESS_STATE = 12,
        OTA_STARTED_STATE = 13,
        OTA_SUCCESS_STATE = 14,
        RUNNING_STATE = 15,
        CHARGING_OFF_STATE = 16,
        CHARGING_STATE = 17,
        IDENTIFY_STATE = 18,
        IDLE_STATE = 19,
        INFO_NEXT_STATE = 20,
        INFO_STATE = 21,
        WIFI_IMPROV_STATE_UI = 22,
        IMPROV_AUTHORIZED_STATE_UI = 23,
        IMPROV_AWAITING_AUTH_STATE_UI = 24,
        IMPROV_PROVISIONED_STATE_UI = 25,
        IMPROV_PROVISIONING_STATE_UI = 26,
        IMPROV_STARTED_STATE = 27,
        ERROR_STATE = 28,
        FACTORY_RESET_STATE = 29,
        REBOOT_STATE = 30,
        RESET_COUNTDOWN_STATE = 31,
    };
    
    enum
    {
        StateIdCount = 32
    };
    
    enum class DISPLAY_STATE_HistoryId: uint8_t
    {
        BOOT_ANIMATION_STATE = 0, // default transition
        OTA_STATE = 1,
        CONNECTING_STATE = 2,
        RUNNING_STATE = 3,
        SHOW_CONNECTED_STATE = 4,
        SHOW_CONNECTING_STATE = 5,
    };

    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId stateId;
    
    // State machine variables. Can be used for inputs, outputs, user variables...
    class Vars : public DisplayBase
    {
    public:
        DISPLAY_STATE_HistoryId DISPLAY_STATE_history;
    };
    
    // Variables. Can be used for inputs, outputs, user variables...
    Vars vars {};
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    DisplaySm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void dispatchEvent(EventId eventId);
    
    // Thread safe.
    static char const * stateIdToString(StateId id);
    
    // Thread safe.
    static char const * eventIdToString(EventId id);


// ################################### PRIVATE MEMBERS ###################################
private:
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exitUpToStateHandler(StateId desiredState);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ROOT_enter();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DISPLAY_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void DISPLAY_STATE_enter();
    
    void DISPLAY_STATE_exit();
    
    void DISPLAY_STATE_button_long_press_start();
    
    void DISPLAY_STATE_charging_off();
    
    void DISPLAY_STATE_charging_on();
    
    void DISPLAY_STATE_error();
    
    void DISPLAY_STATE_ext_port_mode();
    
    void DISPLAY_STATE_factory_reset();
    
    void DISPLAY_STATE_reboot();
    
    void DISPLAY_STATE_InitialState_transition();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state BOOT_ANIMATION_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void BOOT_ANIMATION_STATE_enter();
    
    void BOOT_ANIMATION_STATE_exit();
    
    void BOOT_ANIMATION_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CONNECTING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void CONNECTING_STATE_enter();
    
    void CONNECTING_STATE_exit();
    
    void CONNECTING_STATE_connected();
    
    void CONNECTING_STATE_connecting();
    
    void CONNECTING_STATE_improv_start();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SHOW_CONNECTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void SHOW_CONNECTED_STATE_enter();
    
    void SHOW_CONNECTED_STATE_exit();
    
    void SHOW_CONNECTED_STATE_do();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SHOW_CONNECTING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void SHOW_CONNECTING_STATE_enter();
    
    void SHOW_CONNECTING_STATE_exit();
    
    void SHOW_CONNECTING_STATE_connected();
    
    void SHOW_CONNECTING_STATE_do();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IR_LEARNING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IR_LEARNING_STATE_enter();
    
    void IR_LEARNING_STATE_exit();
    
    void IR_LEARNING_STATE_ir_learning_failed();
    
    void IR_LEARNING_STATE_ir_learning_ok();
    
    void IR_LEARNING_STATE_ir_learning_stop();
    
    void IR_LEARNING_STATE_lost_connection();
    
    void IR_LEARNING_STATE_ota_start();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IR_LEARNED_FAILED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IR_LEARNED_FAILED_STATE_enter();
    
    void IR_LEARNED_FAILED_STATE_exit();
    
    void IR_LEARNED_FAILED_STATE_button_click();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IR_LEARNED_OK_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IR_LEARNED_OK_STATE_enter();
    
    void IR_LEARNED_OK_STATE_exit();
    
    void IR_LEARNED_OK_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IR_LEARNING_STARTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IR_LEARNING_STARTED_STATE_enter();
    
    void IR_LEARNING_STARTED_STATE_exit();
    
    void IR_LEARNING_STARTED_STATE_button_click();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OTA_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void OTA_STATE_enter();
    
    void OTA_STATE_exit();
    
    void OTA_STATE_ota_fail();
    
    void OTA_STATE_ota_progress();
    
    void OTA_STATE_ota_success();
    
    void OTA_STATE_timer();
    
    void OTA_STATE_InitialState_transition();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OTA_FAIL_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void OTA_FAIL_STATE_enter();
    
    void OTA_FAIL_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OTA_PROGRESS_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void OTA_PROGRESS_STATE_enter();
    
    void OTA_PROGRESS_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OTA_STARTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void OTA_STARTED_STATE_enter();
    
    void OTA_STARTED_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OTA_SUCCESS_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void OTA_SUCCESS_STATE_enter();
    
    void OTA_SUCCESS_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state RUNNING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void RUNNING_STATE_enter();
    
    void RUNNING_STATE_exit();
    
    void RUNNING_STATE_button_click();
    
    void RUNNING_STATE_charging_off();
    
    void RUNNING_STATE_charging_on();
    
    void RUNNING_STATE_identify();
    
    void RUNNING_STATE_ir_learning_start();
    
    void RUNNING_STATE_lost_connection();
    
    void RUNNING_STATE_ota_start();
    
    void RUNNING_STATE_timer();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGING_OFF_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void CHARGING_OFF_STATE_enter();
    
    void CHARGING_OFF_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGING_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void CHARGING_STATE_enter();
    
    void CHARGING_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IDENTIFY_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IDENTIFY_STATE_enter();
    
    void IDENTIFY_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IDLE_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IDLE_STATE_enter();
    
    void IDLE_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state INFO_NEXT_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void INFO_NEXT_STATE_enter();
    
    void INFO_NEXT_STATE_exit();
    
    void INFO_NEXT_STATE_button_click();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state INFO_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void INFO_STATE_enter();
    
    void INFO_STATE_exit();
    
    void INFO_STATE_button_click();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WIFI_IMPROV_STATE_UI
    ////////////////////////////////////////////////////////////////////////////////
    
    void WIFI_IMPROV_STATE_UI_enter();
    
    void WIFI_IMPROV_STATE_UI_exit();
    
    void WIFI_IMPROV_STATE_UI_connected();
    
    void WIFI_IMPROV_STATE_UI_improv_auth_required();
    
    void WIFI_IMPROV_STATE_UI_improv_authorized();
    
    void WIFI_IMPROV_STATE_UI_improv_end();
    
    void WIFI_IMPROV_STATE_UI_improv_provisioning();
    
    void WIFI_IMPROV_STATE_UI_improv_start();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_AUTHORIZED_STATE_UI
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_AUTHORIZED_STATE_UI_enter();
    
    void IMPROV_AUTHORIZED_STATE_UI_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_AWAITING_AUTH_STATE_UI
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_AWAITING_AUTH_STATE_UI_enter();
    
    void IMPROV_AWAITING_AUTH_STATE_UI_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_PROVISIONED_STATE_UI
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_PROVISIONED_STATE_UI_enter();
    
    void IMPROV_PROVISIONED_STATE_UI_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_PROVISIONING_STATE_UI
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_PROVISIONING_STATE_UI_enter();
    
    void IMPROV_PROVISIONING_STATE_UI_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IMPROV_STARTED_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void IMPROV_STARTED_STATE_enter();
    
    void IMPROV_STARTED_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ERROR_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void ERROR_STATE_enter();
    
    void ERROR_STATE_exit();
    
    void ERROR_STATE_do();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state FACTORY_RESET_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void FACTORY_RESET_STATE_enter();
    
    void FACTORY_RESET_STATE_exit();
    
    void FACTORY_RESET_STATE_do();
    
    void FACTORY_RESET_STATE_reboot();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state REBOOT_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void REBOOT_STATE_enter();
    
    void REBOOT_STATE_exit();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state RESET_COUNTDOWN_STATE
    ////////////////////////////////////////////////////////////////////////////////
    
    void RESET_COUNTDOWN_STATE_enter();
    
    void RESET_COUNTDOWN_STATE_exit();
    
    void RESET_COUNTDOWN_STATE_button_long_press_up();
    
    void RESET_COUNTDOWN_STATE_do();
};
